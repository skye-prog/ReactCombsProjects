{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"; // we want to seperate the reducers if they don't have connections\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"skyecounter\",\n  initialState: initialCounterState,\n  //reducers : put all the methods inside, it can get the latest state\n  reducers: {\n    incremented(state) {\n      // the code here is still immutable because of internal package\n      state.counter++;\n    },\n\n    decremented(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // here payload must be payload, it's the default\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n}; // an object, should use :\n\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // we only can have one store , but we can use map t\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //put an object in configureStore\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/skyezhang/Downloads/redux-MultipleSlices/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","incremented","state","decremented","increase","action","payload","toggle","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CACA;;AACA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,aADyB;AAE/BC,EAAAA,YAAY,EAAEL,mBAFiB;AAG/B;AACAM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACAA,MAAAA,KAAK,CAACP,OAAN;AACD,KAJO;;AAKRQ,IAAAA,WAAW,CAACD,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACP,OAAN;AACD,KAPO;;AAQRS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADsB,CAC0B;AACjD,KAVO;;AAWRC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;;AAbO;AAJqB,CAAD,CAAhC;AAoBA,MAAMY,gBAAgB,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzB,C,CAAqD;;AACrD,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,YAAY,EAAES,gBAFc;AAG5BR,EAAAA,QAAQ,EAAE;AACRW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACD,KAHO;;AAIRG,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACD;;AANO;AAHkB,CAAD,CAA7B,C,CAYA;;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AAAEqB,EAAAA,OAAO,EAAEjB,YAAY,CAACiB;AAAxB,CAAD,CAA5B,C,CAAiE;;AAEjE,OAAO,MAAMC,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AACP,eAAeH,KAAf","sourcesContent":["import { createStore } from \"redux\";\n\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n// we want to seperate the reducers if they don't have connections\nconst initialCounterState = { counter: 0, showCounter: true };\nconst counterSlice = createSlice({\n  name: \"skyecounter\",\n  initialState: initialCounterState,\n  //reducers : put all the methods inside, it can get the latest state\n  reducers: {\n    incremented(state) {\n      // the code here is still immutable because of internal package\n      state.counter++;\n    },\n    decremented(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // here payload must be payload, it's the default\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\nconst initialAuthState = { isAuthenticated: false }; // an object, should use :\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n// we only can have one store , but we can use map t\nconst store = configureStore({ reducer: counterSlice.reducer }); //put an object in configureStore\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}