{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"; // we want to seperate the reducers if they don't have connections\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"skyecounter\",\n  initialState: initialCounterState,\n  //reducers : put all the methods inside, it can get the latest state\n  reducers: {\n    incremented(state) {\n      // the code here is still immutable because of internal package\n      state.counter++;\n    },\n\n    decremented(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // here payload must be payload, it's the default\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n}; // an object, should use :\n\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state;\n    },\n\n    logout() {}\n\n  }\n}); // action creators\n//counterSlice.actions.toggle( );\n// if you have only one reducer\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //put an object in configureStore\n// if you have many reducers , you can make it as a map\n//const store = configureStore({ reducer: {counter: counterSlice.reducer},{ } });\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/skyezhang/Downloads/redux-MultipleSlices/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","incremented","state","decremented","increase","action","payload","toggle","initialAuthState","isAuthenticated","login","logout","store","reducer","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CACA;;AACA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,aADyB;AAE/BC,EAAAA,YAAY,EAAEL,mBAFiB;AAG/B;AACAM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACAA,MAAAA,KAAK,CAACP,OAAN;AACD,KAJO;;AAKRQ,IAAAA,WAAW,CAACD,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACP,OAAN;AACD,KAPO;;AAQRS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADsB,CAC0B;AACjD,KAVO;;AAWRC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;;AAbO;AAJqB,CAAD,CAAhC;AAoBA,MAAMY,gBAAgB,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzB,C,CAAqD;;AACrDjB,WAAW,CAAC;AACVM,EAAAA,IAAI,EAAE,gBADI;AAEVC,EAAAA,YAAY,EAAES,gBAFJ;AAGVR,EAAAA,QAAQ,EAAE;AAAEU,IAAAA,KAAK,CAACR,KAAD,EAAQ;AAACA,MAAAA,KAAK;AAAC,KAAtB;;AAAwBS,IAAAA,MAAM,GAAG,CAAE;;AAAnC;AAHA,CAAD,CAAX,C,CAKA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGnB,cAAc,CAAC;AAAEoB,EAAAA,OAAO,EAAEhB,YAAY,CAACgB;AAAxB,CAAD,CAA5B,C,CAAiE;AACjE;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGjB,YAAY,CAACkB,OAApC;AACP,eAAeH,KAAf","sourcesContent":["import { createStore } from \"redux\";\n\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n// we want to seperate the reducers if they don't have connections\nconst initialCounterState = { counter: 0, showCounter: true };\nconst counterSlice = createSlice({\n  name: \"skyecounter\",\n  initialState: initialCounterState,\n  //reducers : put all the methods inside, it can get the latest state\n  reducers: {\n    incremented(state) {\n      // the code here is still immutable because of internal package\n      state.counter++;\n    },\n    decremented(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // here payload must be payload, it's the default\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\nconst initialAuthState = { isAuthenticated: false }; // an object, should use :\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: { login(state) {state}, logout() {} },\n});\n// action creators\n//counterSlice.actions.toggle( );\n// if you have only one reducer\nconst store = configureStore({ reducer: counterSlice.reducer }); //put an object in configureStore\n// if you have many reducers , you can make it as a map\n//const store = configureStore({ reducer: {counter: counterSlice.reducer},{ } });\nexport const counterActions = counterSlice.actions;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}